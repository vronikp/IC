'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General



#Region "Trabajo"
Public Class Trabajo

  Const _Procedimiento As String = "proc_Trabajo"

  Private mSucursal As Sucursal = Nothing

  Private mPardetTipoTrabajo As WWTSParametroDet = Nothing

  Private mCliente As Cliente = Nothing

  Public Sub New(ByVal _Sucursal As Sucursal, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _Sucursal.OperadorDatos
    Sucursal = _Sucursal
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Sucursal As Sucursal, ByVal Secuencia As Integer)
    Me.New(_Sucursal, False)
    Trabaj_Secuencia = Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Trabajo")
    End If
  End Sub

  Private mItems As String = String.Empty
  Public ReadOnly Property Items As String
    Get
      If String.IsNullOrWhiteSpace(mItems) Then
        mItems = AgregarCantidadaItems()
      End If
      Return mItems
    End Get
  End Property

  Private Function AgregarCantidadaItems() As String
    Dim oResult As String = String.Empty
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With OperadorDatos
      .AgregarParametro("@Accion", "it")
      .AgregarParametro("@Empres_Codigo", Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
      .AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
      .Procedimiento = "proc_Trabajo"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        If Not String.IsNullOrWhiteSpace(oResult) Then
          oResult = oResult + ", "
        End If
        oResult = oResult + String.Format("{0} ({1})", CInt(CDec(_dr(1))).ToString, CStr(_dr(0)))
      Next
    End If
    Return oResult
  End Function

  'Sucursal
  Public Overridable Property Sucursal() As Sucursal
    Get
      If Me.mSucursal Is Nothing AndAlso Sucurs_Codigo > 0 Then
        Me.mSucursal = New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Sucurs_Codigo)
      End If
      Return Me.mSucursal
    End Get
    Set(ByVal value As Sucursal)
      Me.mSucursal = value
      Empres_Codigo = value.Empres_Codigo
      Sucurs_Codigo = value.Sucurs_Codigo
    End Set
  End Property

  'WWTSParametroDet
  Public Overridable Property PardetTipoTrabajo() As WWTSParametroDet
    Get
      If Me.mPardetTipoTrabajo Is Nothing AndAlso Pardet_TipoTrabajo > 0 Then
        Me.mPardetTipoTrabajo = New WWTSParametroDet(OperadorDatos, Parame_TipoTrabajo, Pardet_TipoTrabajo)
      End If
      Return Me.mPardetTipoTrabajo
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoTrabajo = value
      Parame_TipoTrabajo = value.Parame_Codigo
      Pardet_TipoTrabajo = value.Pardet_Secuencia
    End Set
  End Property

  'Cliente
  Public Overridable Property Cliente() As Cliente
    Get
      If Me.mCliente Is Nothing AndAlso Entida_Cliente > 0 Then
        Me.mCliente = New Cliente(OperadorDatos, Entida_Cliente)
      End If
      Return Me.mCliente
    End Get
    Set(ByVal value As Cliente)
      If value Is Nothing Then
        Throw New Exception("Debe seleccionar un cliente")
      End If
      Me.mCliente = value
      Entida_Cliente = value.Entida_Codigo
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Hora apertura", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 110, True)> _
  Public ReadOnly Property HoraApertura As String
    Get
      Dim _fecha As DateTime = Nothing
      For Each _tlog As TrabajoLog In TrabajoLogList.ObtenerLista(Me)
        If _tlog.Pardet_AccionTrabajo = Enumerados.enumEstadoSobre.SobreRegistrado Then
          _fecha = _tlog.TraLog_FechaHora
        End If
      Next
      If _fecha = Nothing Then
        Return String.Empty
      Else
        Return String.Format("{0} {1}", _fecha.ToShortDateString, _fecha.ToShortTimeString)
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Sobre", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 70, True)> _
  Public ReadOnly Property Sobre As Integer
    Get
      Return Trabaj_Secuencia
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Trabajo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public Overridable ReadOnly Property PardetTipoTrabajoString() As String
    Get
      If PardetTipoTrabajo Is Nothing Then
        Return String.Empty
      Else
        Return mPardetTipoTrabajo.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Cliente", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 190, True)> _
  Public ReadOnly Property ClienteString As String
    Get
      If Cliente Is Nothing Then
        Return String.Empty
      Else
        Return Cliente.NombreCompleto
      End If
    End Get
  End Property

  Public ReadOnly Property Descripcion As String
    Get
      Return String.Format("Sobre #{0} {1}", Trabaj_Secuencia, ClienteString)
    End Get
  End Property

  Public ReadOnly Property UltimoTrabajoLog As TrabajoLog
    Get
      Dim _trabajologs As TrabajoLogList = TrabajoLogList.UltimoEstado(Me)
      If _trabajologs Is Nothing OrElse _trabajologs.Count = 0 Then
        Return Nothing
      Else
        Return _trabajologs(0)
      End If
    End Get
  End Property

  Public ReadOnly Property TrabajoLogs As TrabajoLogList
    Get
      Return TrabajoLogList.ObtenerLista(Me)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fotos bajadas", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 60, False)> _
  Public ReadOnly Property Fotosbajadas As Integer
    Get
      Return Trabaj_FotosBajadas
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Hora diseñador", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, False)> _
  Public ReadOnly Property HoraEditor As String
    Get
      Dim _fecha As DateTime = Nothing
      For Each _tlog As TrabajoLog In TrabajoLogList.ObtenerLista(Me)
        Select Case _tlog.Pardet_AccionTrabajo
          Case Enumerados.enumEstadoSobre.TomadoporEditores
            _fecha = _tlog.TraLog_FechaHora
          Case Enumerados.enumEstadoSobre.RechazadoEditores
            _fecha = Nothing
        End Select
      Next
      If _fecha = Nothing Then
        Return String.Empty
      Else
        Return _fecha.ToShortTimeString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Hora laboratorio", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, False)> _
  Public ReadOnly Property HoraImprenta As String
    Get
      Dim _fecha As DateTime = Nothing
      For Each _tlog As TrabajoLog In TrabajoLogList.ObtenerLista(Me)
        Select _tlog.Pardet_AccionTrabajo
          Case Enumerados.enumEstadoSobre.TomadoImprenta
            _fecha = _tlog.TraLog_FechaHora
          Case Enumerados.enumEstadoSobre.RechazadoImprenta
            _fecha = Nothing
        End Select
      Next
      If _fecha = Nothing Then
        Return String.Empty
      Else
        Return _fecha.ToShortTimeString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tiempo Diseñador minutos", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 100, False)> _
  Public ReadOnly Property TiempoEditorMinutos As Integer
    Get
      Dim _fechaEditor As DateTime = Nothing
      Dim _fechaImprenta As DateTime = Nothing
      For Each _tlog As TrabajoLog In TrabajoLogList.ObtenerLista(Me)
        If _tlog.Pardet_AccionTrabajo = Enumerados.enumEstadoSobre.TomadoporEditores Then
          _fechaEditor = _tlog.TraLog_FechaHora
        End If
        If _tlog.Pardet_AccionTrabajo = Enumerados.enumEstadoSobre.TomadoImprenta Then
          _fechaImprenta = _tlog.TraLog_FechaHora
        End If
      Next
      If _fechaImprenta = Nothing OrElse _fechaEditor = Nothing Then
        Return 0
      Else
        Return DateDiff(DateInterval.Minute, _fechaEditor, _fechaImprenta)
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Estado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 110, True)> _
  Public ReadOnly Property EstadoTrabajo As String
    Get
      Dim _trabajolog As TrabajoLog = UltimoTrabajoLog
      If _trabajolog Is Nothing Then
        Return String.Empty
      Else
        Return _trabajolog.PardetAccionTrabajoString
      End If
    End Get
  End Property

  Public ReadOnly Property MinutosenEspera As Integer
    Get
      Dim _trabajolog As TrabajoLog = UltimoTrabajoLog
      If _trabajolog Is Nothing Then
        Return -1
      Else
        Return DateDiff(DateInterval.Minute, _trabajolog.TraLog_FechaHora, Utilerias.fechahoraservidor(OperadorDatos))
      End If
    End Get
  End Property

  Public ReadOnly Property EmpleadoUltimoLog As String
    Get
      Dim _trabajolog As TrabajoLog = UltimoTrabajoLog
      If _trabajolog Is Nothing Then
        Return String.Empty
      Else
        Return _trabajolog.EmpleadoString
      End If
    End Get
  End Property

  Public ReadOnly Property Proformas As TrabajoxMovimientoInventarioList
    Get
      Return TrabajoxMovimientoInventarioList.ObtenerTrabajoxMovimientoInventarioList(Me, TrabajoxMovimientoInventarioList.enumTipoTransaccion.Proforma)
    End Get
  End Property

  Public ReadOnly Property OrdenesProduccion As TrabajoxMovimientoInventarioList
    Get
      Return TrabajoxMovimientoInventarioList.ObtenerTrabajoxMovimientoInventarioList(Me, TrabajoxMovimientoInventarioList.enumTipoTransaccion.OrdenProduccion)
    End Get
  End Property

  Public ReadOnly Property Facturas As TrabajoxMovimientoInventarioList
    Get
      Return TrabajoxMovimientoInventarioList.ObtenerTrabajoxMovimientoInventarioList(Me, TrabajoxMovimientoInventarioList.enumTipoTransaccion.Factura)
    End Get
  End Property

  Private mDeuda As Decimal = 0
  <Infoware.Reportes.CampoReporteAtributo("Valor", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 70, True)> _
  Public ReadOnly Property Deuda As Decimal
    Get
      Return mDeuda
    End Get
  End Property

  Private mPagado As Decimal = 0
  <Infoware.Reportes.CampoReporteAtributo("Abono", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 70, True)> _
  Public ReadOnly Property Pagado As Decimal
    Get
      Return mPagado
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Saldo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 70, True)> _
  Public ReadOnly Property Saldo As Decimal
    Get
      Return mDeuda - mPagado
    End Get
  End Property


  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Sucurs_Codigo = CType(Fila("Sucurs_Codigo"), Integer)
    Trabaj_Secuencia = CType(Fila("Trabaj_Secuencia"), Integer)
    Entida_Cliente = CType(Fila("Entida_Cliente"), Integer)
    Parame_TipoTrabajo = CType(Fila("Parame_TipoTrabajo"), Integer)
    Pardet_TipoTrabajo = CType(Fila("Pardet_TipoTrabajo"), Integer)
    Trabaj_Observacion = CStr(Fila("Trabaj_Observacion"))
    Trabaj_FotosBajadas = CInt(Fila("Trabaj_FotosBajadas"))
    Dim obj As Object
    mDeuda = 0
    Try
      obj = Fila("Deuda")
      If Not TypeOf obj Is DBNull Then
        mDeuda = CType(obj, String)
      End If
    Catch ex As Exception
    End Try
    mPagado = 0
    Try
      obj = Fila("Pagado")
      If Not TypeOf obj Is DBNull Then
        mPagado = CType(obj, String)
      End If
    Catch ex As Exception
    End Try

    mSucursal = Nothing
    mPardetTipoTrabajo = Nothing
    mCliente = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia) 
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar(ByVal _Empleado As Empleado, ByVal _VerificarSaldo As Boolean) As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@Entida_Cliente", Entida_Cliente)
    OperadorDatos.AgregarParametro("@Parame_TipoTrabajo", Parame_TipoTrabajo)
    OperadorDatos.AgregarParametro("@Pardet_TipoTrabajo", Pardet_TipoTrabajo)
    OperadorDatos.AgregarParametro("@Trabaj_Observacion", Trabaj_Observacion)
    OperadorDatos.AgregarParametro("@Trabaj_FotosBajadas", Trabaj_FotosBajadas)

    OperadorDatos.AgregarParametro("@VerificarSaldo", _VerificarSaldo)
    OperadorDatos.AgregarParametro("@Entida_Empleado", _Empleado.Entida_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Trabaj_Secuencia = Result
      End If
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "TrabajoList"
Public Class TrabajoList
  Inherits System.ComponentModel.BindingList(Of Trabajo)

  Public Shared Function ObtenerLista(ByVal _Sucursal As Sucursal, ByVal _EstadoSobre As Enumerados.enumEstadoSobre, _fecdesde As Date, _fechasta As Date, ByVal _filtro As String) As TrabajoList
    Dim oResult As TrabajoList = New TrabajoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Sucursal.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _Sucursal.Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", _Sucursal.Sucurs_Codigo)
      .AgregarParametro("@Pardet_AccionTrabajo", _EstadoSobre)
      If Not _fecdesde = Nothing Then
        .AgregarParametro("@fecdesde", _fecdesde.Date)
        .AgregarParametro("@fechasta", _fechasta.Date)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Trabajo"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Trabajo(_Sucursal, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

End Class
#End Region
