'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General



#Region "MovimientoInventarioDet"
Public Class MovimientoInventarioDet

  Const _Procedimiento As String = "proc_MovimientoInventarioDet"

  Private mMovimientoInventario As MovimientoInventario = Nothing

  Private mItem As Item = Nothing

  Private mUnidadMedidaConversion As UnidadMedidaConversion = Nothing

  Private mPardetUnidadMedida As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _MovimientoInventario As MovimientoInventario, ByVal _EsNuevo As Boolean)
    Me.New(_MovimientoInventario.OperadorDatos, _EsNuevo)
    MovimientoInventario = _MovimientoInventario
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _MovimientoInventario As MovimientoInventario, ByVal _Moinde_Secuencia As Integer)
    Me.New(_MovimientoInventario, False)
    Moinde_Secuencia = _Moinde_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto MovimientoInventarioDet")
    End If
  End Sub

  Private mBloqueado As Boolean = False
  Public Property Bloqueado As Boolean
    Get
      Return mBloqueado
    End Get
    Set(ByVal value As Boolean)
      mBloqueado = value
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Codigo_Item", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero)> _
  Public Property Item_Codigo() As Integer
    Get
      Return mItem_Codigo
    End Get
    Set(ByVal value As Integer)
      mItem_Codigo = value
      mItem = Nothing
      If Me.mItem Is Nothing AndAlso mItem_Codigo > 0 Then
        Try
          Me.mItem = New Item(OperadorDatos, mItem_Codigo)
          Me.UnidadMedidaConversion = New UnidadMedidaConversion(mItem.PardetUnidadMedida, mItem.PardetUnidadMedida)
          Me.Moinde_Cantidad = 1

          Dim _valor As Decimal = 0
          Select Case mMovimientoInventario.Pardet_Tipomovinv
            Case Enumerados.enumTipoMovInv.Venta, Enumerados.enumTipoMovInv.DevVenta
              Dim _ItemxTipoPrecio As ItemxTipoPrecio
              _ItemxTipoPrecio = New ItemxTipoPrecio(mItem, MovimientoInventario.Sucursal, MovimientoInventario.Venta.PardetTipoPrecio)
              _valor = _ItemxTipoPrecio.IteTip_Valor
              If mItem.Item_esIvaIncluido Then
                _valor = _valor / (1 + mMovimientoInventario.Movinv_porcIVA / 100)
              End If
            Case Else
              Try
                Dim _itemxbodega As New ItemxBodega(mItem, MovimientoInventario.Bodega)
                _valor = _itemxbodega.Itebod_Costopromedio
              Catch ex As Exception
                _valor = 0
              End Try
          End Select

          Moinde_Valor = _valor
        Catch ex As Exception
          MovimientoInventario.Codigo_No_Existe()
        End Try
      End If
    End Set
  End Property

  'MovimientoInventario
  Public Overridable Property MovimientoInventario() As MovimientoInventario
    Get
      If Me.mMovimientoInventario Is Nothing AndAlso Movinv_Secuencia > 0 Then
        Me.mMovimientoInventario = New MovimientoInventario(New Sucursal(New Empresa(OperadorDatos, Empres_Bodega), Sucurs_Bodega), CType(Pardet_Tipomovinv, Enumerados.enumTipoMovInv), Movinv_Secuencia)
      End If
      Return Me.mMovimientoInventario
    End Get
    Set(ByVal value As MovimientoInventario)
      Me.mMovimientoInventario = value
      Parame_Tipomovinv = value.Parame_Tipomovinv
      Pardet_Tipomovinv = value.Pardet_Tipomovinv
      Empres_Bodega = value.Empres_Bodega
      Sucurs_Bodega = value.Sucurs_Bodega
      Movinv_Secuencia = value.Movinv_Secuencia
    End Set
  End Property

#Region "DetallesSeries"
  Private WithEvents mDetallesSeries As MovimientoInventarioDetSerieList = Nothing
  Public Property DetallesSeries() As MovimientoInventarioDetSerieList
    Get
      If mDetallesSeries Is Nothing Then
        If EsNuevo Then
          mDetallesSeries = New MovimientoInventarioDetSerieList
          mDetallesSeries.AddNew()
        Else
          mDetallesSeries = MovimientoInventarioDetSerieList.ObtenerLista(Me)
        End If
      End If
      Return mDetallesSeries
    End Get
    Set(ByVal value As MovimientoInventarioDetSerieList)
      mDetallesSeries = value
    End Set
  End Property

  Private Sub mDetalles_AddingNew(ByVal sender As Object, ByVal e As System.ComponentModel.AddingNewEventArgs) Handles mDetallesSeries.AddingNew
    e.NewObject = New MovimientoInventarioDetSerie(Me, True)
  End Sub
#End Region

#Region "Kardex individual"
  Public ReadOnly Property Fecha() As Date
    Get
      If Pardet_Tipomovinv = -1 OrElse MovimientoInventario Is Nothing Then
        Return Now.Date
      Else
        Return mMovimientoInventario.Movinv_Fecha
      End If
    End Get
  End Property

  Public ReadOnly Property Documento() As String
    Get
      If Pardet_Tipomovinv = -1 OrElse MovimientoInventario Is Nothing Then
        Return String.Empty
      Else
        Return String.Format("{0} {1}", mMovimientoInventario.PardetTipoMovInv.Pardet_DatoStr1, mMovimientoInventario.Movinv_Secuencia.ToString.Trim)
      End If
    End Get
  End Property

  Public ReadOnly Property Detalle() As String
    Get
      If Pardet_Tipomovinv = -1 OrElse MovimientoInventario Is Nothing Then
        Return "Saldo anterior"
      Else
        If MovimientoInventario.Venta IsNot Nothing Then
          Return MovimientoInventario.Venta.Cliente.NombreCompleto
        ElseIf MovimientoInventario.Compra IsNot Nothing Then
          Return MovimientoInventario.Compra.Proveedor.NombreCompleto
        Else
          Return mMovimientoInventario.Movinv_Observaciones
        End If
      End If
    End Get
  End Property

  Public ReadOnly Property Ingresos() As String
    Get
      If Moinde_CantidadStd >= 0 Then
        Return Moinde_CantidadStd.ToString("0.00")
      Else
        Return String.Empty
      End If
    End Get
  End Property

  Public ReadOnly Property Egresos() As String
    Get
      If Moinde_CantidadStd < 0 Then
        Return Moinde_CantidadStd.ToString("0.00")
      Else
        Return String.Empty
      End If
    End Get
  End Property

  Private mSaldo As Decimal = 0
  Public Property Saldo() As String
    Get
      Return mSaldo.ToString("0.00")
    End Get
    Set(ByVal value As String)
      mSaldo = value
    End Set
  End Property
#End Region

  'Item
  Public Overridable Property Item() As Item
    Get
      If Me.mItem Is Nothing AndAlso Item_Codigo > 0 Then
        Try
          Me.mItem = New Item(OperadorDatos, Item_Codigo)
        Catch ex As Exception
          mItem = Nothing
        End Try
      End If
      Return Me.mItem
    End Get
    Set(ByVal value As Item)
      Me.mItem = value
      Item_Codigo = value.Item_Codigo

      Parame_UnidMedStd = value.Parame_Unidadmedida
      Pardet_UnidMedStd = value.Pardet_Unidadmedida
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Nombre_Item")> _
  Public Overridable ReadOnly Property ItemString() As String
    Get
      If Item Is Nothing Then
        Return String.Empty
      Else
        Return String.Format("{0}{1}", IIf(Moinde_esDetalleCombo, " + ", ""), mItem.Item_Descripcion)
      End If
    End Get
  End Property

  Public Overridable Property UnidadMedidaConversion() As UnidadMedidaConversion
    Get
      If Pardet_UnidadMedida > 0 AndAlso Pardet_UnidMedStd > 0 AndAlso Pardet_UnidadMedida <> Pardet_UnidMedStd Then 'Me.mUnidadMedidaConversion Is Nothing AndAlso
        Me.mUnidadMedidaConversion = New UnidadMedidaConversion(New WWTSParametroDet(OperadorDatos, Parame_UnidadMedida, Pardet_UnidadMedida), New WWTSParametroDet(OperadorDatos, Parame_UnidMedStd, Pardet_UnidMedStd))
      End If
      Return Me.mUnidadMedidaConversion
    End Get
    Set(ByVal value As UnidadMedidaConversion)
      Me.mUnidadMedidaConversion = value
      Parame_UnidadMedida = value.Parame_Unidadmedida
      Pardet_UnidadMedida = value.Pardet_Unidadmedida
      Parame_UnidMedStd = value.Parame_unidadmedidadestino
      Pardet_UnidMedStd = value.Pardet_Unidadmedidadestino
    End Set
  End Property

  'WWTSParametroDet
  Public Overridable Property PardetUnidadMedida() As WWTSParametroDet
    Get
      If Me.mPardetUnidadMedida Is Nothing AndAlso Pardet_UnidadMedida > 0 Then
        Me.mPardetUnidadMedida = New WWTSParametroDet(OperadorDatos, Parame_UnidadMedida, Pardet_UnidadMedida)
      End If
      Return Me.mPardetUnidadMedida
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetUnidadMedida = value
      Parame_UnidadMedida = value.Parame_Codigo
      Pardet_UnidadMedida = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Nombre_UnidadMedida")> _
  Public ReadOnly Property PardetUnidadMedidaString() As String
    Get
      If PardetUnidadMedida Is Nothing Then
        Return String.Empty
      Else
        Return mPardetUnidadMedida.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("CantidadStd", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales)> _
  Public ReadOnly Property Moinde_CantidadStd() As Decimal
    Get
      If UnidadMedidaConversion Is Nothing Then
        Return Moinde_Cantidad
      Else
        Return Moinde_Cantidad * mUnidadMedidaConversion.Unmeco_Factor
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Subtotal", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales)> _
  Public ReadOnly Property SubTotal() As Decimal
    Get
      Dim valor As Decimal = Moinde_Valor
      'If UnidadMedidaConversion IsNot Nothing Then
      '  If mUnidadMedidaConversion.Unmeco_Factor = 0 Then
      '    valor = 0
      '  Else
      '    valor = Moinde_Valor / mUnidadMedidaConversion.Unmeco_Factor
      '  End If
      'End If
      'valor = valor * Moinde_CantidadStd
      valor = Moinde_Cantidad * Moinde_Valor
      valor -= valor * (Moinde_Descto / 100)
      valor -= valor * (MovimientoInventario.Movinv_Descto / 100)
      Return valor
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("ValorUnitStd", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales)> _
  Public Shadows ReadOnly Property Moinde_ValorStd() As Decimal
    Get
      Dim valor As Decimal = Moinde_Valor
      If UnidadMedidaConversion IsNot Nothing Then
        If mUnidadMedidaConversion.Unmeco_Factor = 0 Then
          valor = 0
        Else
          valor = Moinde_Valor / mUnidadMedidaConversion.Unmeco_Factor
        End If
      End If
      valor -= valor * (Moinde_Descto / 100)
      valor -= valor * (MovimientoInventario.Movinv_Descto / 100)
      Return valor
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descuento", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales)> _
  Public ReadOnly Property Descuento() As Decimal
    Get
      Dim valor As Decimal = Moinde_Valor
      If UnidadMedidaConversion IsNot Nothing Then
        If mUnidadMedidaConversion.Unmeco_Factor = 0 Then
          valor = 0
        Else
          valor = Moinde_Valor / mUnidadMedidaConversion.Unmeco_Factor
        End If
      End If
      Dim descto As Decimal = 0
      descto += valor * (Moinde_Descto / 100)
      valor -= valor * (Moinde_Descto / 100)
      descto += valor * (MovimientoInventario.Movinv_Descto / 100)
      valor -= valor * (MovimientoInventario.Movinv_Descto / 100)
      Return descto
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Total", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales)> _
  Public Overridable ReadOnly Property Total() As Decimal
    Get
      Return Moinde_CantidadStd * Moinde_ValorStd
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Tipomovinv = CType(Fila("Parame_Tipomovinv"), Integer)
    Pardet_Tipomovinv = CType(Fila("Pardet_Tipomovinv"), Integer)
    Empres_Bodega = CType(Fila("Empres_Bodega"), Integer)
    'If Not Pardet_Tipomovinv = -1 Then
    Sucurs_Bodega = CType(Fila("Sucurs_Bodega"), Integer)
    Movinv_Secuencia = CType(Fila("Movinv_Secuencia"), Integer)
    Moinde_Secuencia = CType(Fila("Moinde_Secuencia"), Integer)
    'End If
    Item_Codigo = CType(Fila("Item_Codigo"), Integer)
    Parame_UnidadMedida = CType(Fila("Parame_UnidadMedida"), Integer)
    Pardet_UnidadMedida = CType(Fila("Pardet_UnidadMedida"), Integer)
    Moinde_Cantidad = CType(Fila("Moinde_Cantidad"), Decimal)
    Moinde_Valor = CType(Fila("Moinde_Valor"), Decimal)
    Moinde_Descto = CType(Fila("Moinde_Descto"), Decimal)
    Parame_UnidMedStd = CType(Fila("Parame_UnidMedStd"), Integer)
    Pardet_UnidMedStd = CType(Fila("Pardet_UnidMedStd"), Integer)
    'Moinde_CantidadStd = CType(Fila("Moinde_CantidadStd"), Decimal)
    'Moinde_ValorStd = CType(Fila("Moinde_ValorStd"), Decimal)
    Moinde_Costo = CType(Fila("Moinde_Costo"), Decimal)
    Moinde_Aplicaiva = CType(Fila("Moinde_Aplicaiva"), Boolean)
    Moinde_esDetalleCombo = CType(Fila("Moinde_esDetalleCombo"), Boolean)
    Try
      Moinde_Descripcion = CStr(Fila("Moinde_Descripcion"))
    Catch ex As Exception
      Moinde_Descripcion = ""
    End Try
    mMovimientoInventario = Nothing
    mItem = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.AgregarParametro("@Moinde_Secuencia", Moinde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    If Not EsNuevo And Not EsModificado Then
      Return True
    End If

    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    Dim mMoinde_CantidadStd As Decimal = Moinde_CantidadStd
    Dim mMoinde_ValorStd As Decimal = Moinde_ValorStd

    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.AgregarParametro("@Moinde_Secuencia", Moinde_Secuencia)
    OperadorDatos.AgregarParametro("@Item_Codigo", Item_Codigo)
    OperadorDatos.AgregarParametro("@Parame_UnidadMedida", Parame_UnidadMedida)
    OperadorDatos.AgregarParametro("@Pardet_UnidadMedida", Pardet_UnidadMedida)
    OperadorDatos.AgregarParametro("@Moinde_Cantidad", Moinde_Cantidad)
    OperadorDatos.AgregarParametro("@Moinde_Valor", Moinde_Valor)
    OperadorDatos.AgregarParametro("@Moinde_Descto", Moinde_Descto)
    OperadorDatos.AgregarParametro("@Parame_UnidMedStd", Parame_UnidMedStd)
    OperadorDatos.AgregarParametro("@Pardet_UnidMedStd", Pardet_UnidMedStd)
    OperadorDatos.AgregarParametro("@Moinde_CantidadStd", mMoinde_CantidadStd)
    OperadorDatos.AgregarParametro("@Moinde_ValorStd", mMoinde_ValorStd)
    OperadorDatos.AgregarParametro("@Moinde_Costo", Moinde_Costo)
    OperadorDatos.AgregarParametro("@Moinde_Aplicaiva", Moinde_Aplicaiva)
    OperadorDatos.AgregarParametro("@Moinde_Descripcion", Moinde_Descripcion)
    OperadorDatos.AgregarParametro("@Moinde_esDetalleCombo", Moinde_esDetalleCombo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Moinde_Secuencia = Result
      End If

      'guardar detalles
      If DetallesSeries IsNot Nothing Then
        For Each _detalle As MovimientoInventarioDetSerie In DetallesSeries
          _detalle.Movimientoinventariodet = Me
          _detalle.EsNuevo = True
          If Not String.IsNullOrEmpty(_detalle.Moidse_Serie) Then
            If Not _detalle.Guardar() Then
              bReturn = False
              Exit For
            End If
          End If
        Next
      End If

      If Not OperadorDatos.EstaenTransaccion Then
        AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If

    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.AgregarParametro("@Moinde_Secuencia", Moinde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "MovimientoInventarioDetList"
Public Class MovimientoInventarioDetList
  Inherits System.ComponentModel.BindingList(Of MovimientoInventarioDet)

  Public Shared Function ObtenerLista(ByVal _MovimientoInventario As MovimientoInventario) As MovimientoInventarioDetList
    Dim oResult As MovimientoInventarioDetList = New MovimientoInventarioDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _MovimientoInventario.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Parame_Tipomovinv", _MovimientoInventario.Parame_Tipomovinv)
      .AgregarParametro("@Pardet_Tipomovinv", _MovimientoInventario.Pardet_Tipomovinv)
      .AgregarParametro("@Empres_Bodega", _MovimientoInventario.Empres_Bodega)
      .AgregarParametro("@Sucurs_Bodega", _MovimientoInventario.Sucurs_Bodega)
      .AgregarParametro("@Movinv_Secuencia", _MovimientoInventario.Movinv_Secuencia)
      .Procedimiento = "proc_MovimientoInventarioDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoInventarioDet(_MovimientoInventario, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function KardexIndividual(ByVal _Item As Item, ByVal _Bodega As Bodega, ByVal _fecdesde As Date, ByVal _fechasta As Date) As MovimientoInventarioDetList
    Dim oResult As MovimientoInventarioDetList = New MovimientoInventarioDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Item.OperadorDatos
      .AgregarParametro("@Accion", "KI")
      .AgregarParametro("@Empres_Bodega", _Bodega.Empres_Codigo)
      .AgregarParametro("@Sucurs_Bodega", _Bodega.Sucurs_Codigo)
      .AgregarParametro("@Item_Codigo", _Item.Item_Codigo)
      .AgregarParametro("@Bodega_Codigo", _Bodega.Bodega_Codigo)
      .AgregarParametro("@fecdesde", _fecdesde.Date)
      .AgregarParametro("@fechasta", _fechasta.Date.AddDays(1))
      .Procedimiento = "proc_MovimientoInventarioDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoInventarioDet(_Item.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If

    Dim saldo As Decimal = 0
    For Each _det As MovimientoInventarioDet In oResult
      saldo += _det.Moinde_CantidadStd
      _det.Saldo = saldo
    Next
    Return oResult
  End Function
End Class
#End Region
