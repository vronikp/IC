'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General



#Region "TrabajoxMovimientoInventario"
Public Class TrabajoxMovimientoInventario

  Const _Procedimiento As String = "proc_TrabajoxMovimientoInventario"

  Private mTrabajo As Trabajo = Nothing

  Private mMovimientoInventario As MovimientoInventario = Nothing

  Public Sub New(ByVal _Trabajo As Trabajo, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _Trabajo.OperadorDatos
    Trabajo = _Trabajo
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Trabajo As Trabajo, ByVal _MovimientoInventario As MovimientoInventario)
    Me.New(_Trabajo, False)
    MovimientoInventario = _MovimientoInventario
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto TrabajoxMovimientoInventario")
    End If
  End Sub

  'Trabajo
  Public Overridable Property Trabajo() As Trabajo
    Get
      If Me.mTrabajo Is Nothing AndAlso Sucurs_Codigo > 0 Then
        Me.mTrabajo = New Trabajo(New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Sucurs_Codigo), Trabaj_Secuencia)
      End If
      Return Me.mTrabajo
    End Get
    Set(ByVal value As Trabajo)
      Me.mTrabajo = value
      Empres_Codigo = value.Empres_Codigo
      Sucurs_Codigo = value.Sucurs_Codigo
      Trabaj_Secuencia = value.Trabaj_Secuencia
    End Set
  End Property

  'WWTSParametroDet
  Public Overridable Property MovimientoInventario() As MovimientoInventario
    Get
      If Me.mMovimientoInventario Is Nothing AndAlso Movinv_Secuencia > 0 Then
        Me.mMovimientoInventario = New MovimientoInventario(New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Sucurs_Codigo), CType(Pardet_Tipomovinv, Enumerados.enumTipoMovInv), Movinv_Secuencia)
      End If
      Return Me.mMovimientoInventario
    End Get
    Set(ByVal value As MovimientoInventario)
      Me.mMovimientoInventario = value
      Parame_Tipomovinv = value.Parame_Tipomovinv
      Pardet_Tipomovinv = value.Pardet_Tipomovinv
      Empres_Codigo = value.Empres_Bodega
      Sucurs_Codigo = value.Sucurs_Bodega
      Movinv_Secuencia = value.Movinv_Secuencia
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Sucurs_Codigo = CType(Fila("Sucurs_Codigo"), Integer)
    Trabaj_Secuencia = CType(Fila("Trabaj_Secuencia"), Integer)
    Parame_Tipomovinv = CType(Fila("Parame_Tipomovinv"), Integer)
    Pardet_Tipomovinv = CType(Fila("Pardet_Tipomovinv"), Integer)
    Movinv_Secuencia = CType(Fila("Movinv_Secuencia"), Integer)
    mTrabajo = Nothing
    mMovimientoInventario = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar(ByVal _VerificarSaldo As Boolean) As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If

    Dim _comenzotransaccion As Boolean = False
    If Not OperadorDatos.EstaenTransaccion Then
      OperadorDatos.ComenzarTransaccion()
      _comenzotransaccion = True
    End If

    If MovimientoInventario.Venta IsNot Nothing Then
      MovimientoInventario.Venta.MovimientoInventario = MovimientoInventario
      bReturn = MovimientoInventario.Venta.Guardar(_VerificarSaldo)
      If bReturn Then
        MovimientoInventario = MovimientoInventario.Venta.MovimientoInventario
      End If
    Else
      bReturn = MovimientoInventario.Guardar()
    End If

    If bReturn Then
      MovimientoInventario = mMovimientoInventario

      OperadorDatos.AgregarParametro("@accion", sAccion)
      OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
      OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
      OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
      OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
      OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
      OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
      OperadorDatos.Procedimiento = _Procedimiento
      bReturn = OperadorDatos.Ejecutar(Result)
      OperadorDatos.LimpiarParametros()
      If bReturn Then
        If Not OperadorDatos.EstaenTransaccion Then
          EsNuevo = False
          EsModificado = False
        End If
      End If
    End If
    If _comenzotransaccion Then
      If bReturn Then
        OperadorDatos.TerminarTransaccion()
        AceptarCambios()
      Else
        OperadorDatos.CancelarTransaccion()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False

    If MovimientoInventario.Venta IsNot Nothing Then
      MovimientoInventario.Venta.AceptarCambios()
    End If
    mMovimientoInventario.AceptarCambios()
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "TrabajoxMovimientoInventarioList"
Public Class TrabajoxMovimientoInventarioList
  Inherits System.ComponentModel.BindingList(Of TrabajoxMovimientoInventario)

  Public Shared Function ObtenerLista(ByVal _Trabajo As Trabajo) As TrabajoxMovimientoInventarioList
    Dim oResult As TrabajoxMovimientoInventarioList = New TrabajoxMovimientoInventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Trabajo.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _Trabajo.Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", _Trabajo.Sucurs_Codigo)
      .AgregarParametro("@Trabaj_Secuencia", _Trabajo.Trabaj_Secuencia)
      .Procedimiento = "proc_TrabajoxMovimientoInventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TrabajoxMovimientoInventario(_Trabajo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Enum enumTipoTransaccion
    Proforma = 1
    OrdenProduccion = 2
    Factura = 3
  End Enum

  Public Shared Function ObtenerTrabajoxMovimientoInventarioList(ByVal _Trabajo As Trabajo, ByVal _TipoTransaccion As enumTipoTransaccion) As TrabajoxMovimientoInventarioList
    Dim oResult As TrabajoxMovimientoInventarioList = New TrabajoxMovimientoInventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Trabajo.OperadorDatos
      .AgregarParametro("@Accion", "FT")
      .AgregarParametro("@Empres_Codigo", _Trabajo.Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", _Trabajo.Sucurs_Codigo)
      .AgregarParametro("@Trabaj_Secuencia", _Trabajo.Trabaj_Secuencia)

      .AgregarParametro("@TipoTransaccion", _TipoTransaccion)
      .Procedimiento = "proc_TrabajoxMovimientoInventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TrabajoxMovimientoInventario(_Trabajo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerTrabajoxMovimientoInventarioList(ByVal _MovimientoInventario As MovimientoInventario) As TrabajoxMovimientoInventarioList
    Dim oResult As TrabajoxMovimientoInventarioList = New TrabajoxMovimientoInventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _MovimientoInventario.OperadorDatos
      .AgregarParametro("@Accion", "FM")
      .AgregarParametro("@Empres_Codigo", _MovimientoInventario.Empres_Bodega)
      .AgregarParametro("@Sucurs_Codigo", _MovimientoInventario.Sucurs_Bodega)
      .AgregarParametro("@Parame_Tipomovinv", _MovimientoInventario.Parame_Tipomovinv)
      .AgregarParametro("@Pardet_Tipomovinv", _MovimientoInventario.Pardet_Tipomovinv)
      .AgregarParametro("@Movinv_Secuencia", _MovimientoInventario.Movinv_Secuencia)
      .Procedimiento = "proc_TrabajoxMovimientoInventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TrabajoxMovimientoInventario()
        _fila.OperadorDatos = _MovimientoInventario.OperadorDatos
        _fila.MapearDataRowaObjeto(_dr)
        _fila.EsNuevo = False
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
