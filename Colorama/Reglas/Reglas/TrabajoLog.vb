'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General



#Region "TrabajoLog"
Public Class TrabajoLog

  Const _Procedimiento As String = "proc_TrabajoLog"

  Private mTrabajo As Trabajo = Nothing

  Private mPardetAccionTrabajo As WWTSParametroDet = Nothing

  Private mEmpleado As Empleado = Nothing

  Public Sub New(ByVal _Trabajo As Trabajo, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _Trabajo.OperadorDatos
    Trabajo = _Trabajo
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Trabajo As Trabajo, ByVal _Secuencia As Integer)
    Me.New(_Trabajo, False)
    TraLog_Secuencia = _Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto TrabajoLog")
    End If
  End Sub

  'Trabajo
  Public Overridable Property Trabajo() As Trabajo
    Get
      If Me.mTrabajo Is Nothing AndAlso Sucurs_Codigo > 0 Then
        Me.mTrabajo = New Trabajo(New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Sucurs_Codigo), Trabaj_Secuencia)
      End If
      Return Me.mTrabajo
    End Get
    Set(ByVal value As Trabajo)
      Me.mTrabajo = value
      Empres_Codigo = value.Empres_Codigo
      Sucurs_Codigo = value.Sucurs_Codigo
      Trabaj_Secuencia = value.Trabaj_Secuencia
    End Set
  End Property

  'WWTSParametroDet
  Public Overridable Property PardetAccionTrabajo() As WWTSParametroDet
    Get
      If Me.mPardetAccionTrabajo Is Nothing AndAlso Pardet_AccionTrabajo > 0 Then
        Me.mPardetAccionTrabajo = New WWTSParametroDet(OperadorDatos, Parame_AccionTrabajo, Pardet_AccionTrabajo)
      End If
      Return Me.mPardetAccionTrabajo
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetAccionTrabajo = value
      Parame_AccionTrabajo = value.Parame_Codigo
      Pardet_AccionTrabajo = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Acción", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 180, True)> _
  Public Overridable ReadOnly Property PardetAccionTrabajoString() As String
    Get
      If PardetAccionTrabajo Is Nothing Then
        Return String.Empty
      Else
        Return mPardetAccionTrabajo.Pardet_Descripcion
      End If
    End Get
  End Property

  'Empleado
  Public Overridable Property Empleado() As Empleado
    Get
      If Me.mEmpleado Is Nothing AndAlso Not Entida_Empleado = 0 Then
        Me.mEmpleado = New Empleado(OperadorDatos, Entida_Empleado)
      End If
      Return Me.mEmpleado
    End Get
    Set(ByVal value As Empleado)
      Me.mEmpleado = value
      Entida_Empleado = value.Entida_Codigo
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha/Hora", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 170, True)> _
  Public ReadOnly Property FechaString As String
    Get
      Return String.Format("{0}", TraLog_FechaHora.ToString)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Empleado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)> _
  Public ReadOnly Property EmpleadoString As String
    Get
      If Empleado Is Nothing Then
        Return String.Empty
      Else
        Return Empleado.NombreCompleto
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Sucurs_Codigo = CType(Fila("Sucurs_Codigo"), Integer)
    Trabaj_Secuencia = CType(Fila("Trabaj_Secuencia"), Integer)
    TraLog_Secuencia = CType(Fila("TraLog_Secuencia"), Integer)
    Parame_AccionTrabajo = CType(Fila("Parame_AccionTrabajo"), Integer)
    Pardet_AccionTrabajo = CType(Fila("Pardet_AccionTrabajo"), Integer)
    TraLog_FechaHora = CDate(Fila("TraLog_FechaHora"))
    Entida_Empleado = CInt(Fila("Entida_Empleado"))
    mTrabajo = Nothing
    mPardetAccionTrabajo = Nothing
    mEmpleado = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@TraLog_Secuencia", TraLog_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    If Not OperadorDatos.EstaenTransaccion Then
      OperadorDatos.ComenzarTransaccion()
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@TraLog_Secuencia", TraLog_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_AccionTrabajo", Parame_AccionTrabajo)
    OperadorDatos.AgregarParametro("@Pardet_AccionTrabajo", Pardet_AccionTrabajo)
    OperadorDatos.AgregarParametro("@TraLog_FechaHora", TraLog_FechaHora)
    OperadorDatos.AgregarParametro("@Entida_Empleado", Entida_Empleado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        TraLog_Secuencia = Result
      End If
      Select Case Pardet_AccionTrabajo
        Case CInt(Enumerados.enumEstadoSobre.RechazadoImprenta), CInt(Enumerados.enumEstadoSobre.RechazadoEditores)
          For Each _txm As TrabajoxMovimientoInventario In Me.Trabajo.Proformas
            If Not _txm.Eliminar() Then
              bReturn = False
              Exit For
            End If
          Next
        Case CInt(Enumerados.enumEstadoSobre.RechazadoEntrega), CInt(Enumerados.enumEstadoSobre.SobreRechazado)
          For Each _txm As TrabajoxMovimientoInventario In Me.Trabajo.Facturas
            If Not _txm.Eliminar() Then
              bReturn = False
              Exit For
            End If
          Next
      End Select
    End If
    If bReturn Then
      AceptarCambios()
      OperadorDatos.TerminarTransaccion()
    Else
      OperadorDatos.CancelarTransaccion()
    End If
    Return bReturn
  End Function

  Public Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Trabaj_Secuencia", Trabaj_Secuencia)
    OperadorDatos.AgregarParametro("@TraLog_Secuencia", TraLog_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "TrabajoLogList"
Public Class TrabajoLogList
  Inherits System.ComponentModel.BindingList(Of TrabajoLog)

  Public Shared Function ObtenerLista(ByVal _Trabajo As Trabajo) As TrabajoLogList
    Dim oResult As TrabajoLogList = New TrabajoLogList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Trabajo.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _Trabajo.Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", _Trabajo.Sucurs_Codigo)
      .AgregarParametro("@Trabaj_Secuencia", _Trabajo.Trabaj_Secuencia)
      .Procedimiento = "proc_TrabajoLog"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TrabajoLog(_Trabajo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function UltimoEstado(ByVal _Trabajo As Trabajo) As TrabajoLogList
    Dim oResult As TrabajoLogList = New TrabajoLogList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Trabajo.OperadorDatos
      .AgregarParametro("@Accion", "UE")
      .AgregarParametro("@Empres_Codigo", _Trabajo.Empres_Codigo)
      .AgregarParametro("@Sucurs_Codigo", _Trabajo.Sucurs_Codigo)
      .AgregarParametro("@Trabaj_Secuencia", _Trabajo.Trabaj_Secuencia)
      .Procedimiento = "proc_TrabajoLog"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TrabajoLog(_Trabajo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
