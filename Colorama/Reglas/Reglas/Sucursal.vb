'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "Sucursal"
Public Class Sucursal

  Const _Procedimiento As String = "proc_Sucursal"

  Private mEntidadlugar As EntidadLugar = Nothing

  Private WithEvents mEmpresa As Empresa = Nothing

  Private mClienteContado As Cliente = Nothing

  Public Sub New(ByVal _Empresa As Empresa, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _Empresa.OperadorDatos
    Empresa = _Empresa
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Empresa As Empresa, ByVal _Sucurs_Codigo As Integer)
    Me.New(_Empresa, False)
    Sucurs_Codigo = _Sucurs_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Sucursal")
    End If
  End Sub

  'Entidadlugar
  Public Overridable Property Entidadlugar() As EntidadLugar
    Get
      If Me.mEntidadlugar Is Nothing Then
        Me.mEntidadlugar = New EntidadLugar(OperadorDatos, Entida_Codigo)
      End If
      Return Me.mEntidadlugar
    End Get
    Set(ByVal value As EntidadLugar)
      Me.mEntidadlugar = value
      Entida_Codigo = value.Entida_Codigo
    End Set
  End Property

  'Empresa
  Public Overridable Property Empresa() As Empresa
    Get
      If Me.mEmpresa Is Nothing Then
        Me.mEmpresa = New Empresa(OperadorDatos, Empres_Codigo)
      End If
      Return Me.mEmpresa
    End Get
    Set(ByVal value As Empresa)
      Me.mEmpresa = value
      Empres_Codigo = Me.mEmpresa.Empres_Codigo
    End Set
  End Property

  Public ReadOnly Property PrefijoFacturas() As String
    Get
      If Entidadlugar Is Nothing Then
        Return String.Empty
      Else
        For Each _ident As EntidadIdentificacion In Entidadlugar.Entidad.Identificaciones
          If _ident.Pardet_Tipoidentificacion = Enumerados.enumTipoIdentificacion.PrefijoFacturas Then
            Return _ident.Identi_Numero
          End If
        Next
        Return String.Empty
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Nombres", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property NombreCompleto() As String
    Get
      If Entidadlugar Is Nothing Then
        Return String.Empty
      Else
        Return String.Format("{0}-{1}", PrefijoFacturas, Entidadlugar.NombreCompleto)
      End If
    End Get
  End Property

  Public ReadOnly Property TipoPagoxTipoPrecios() As TipoPagoxTipoPrecioList
    Get
      Return TipoPagoxTipoPrecioList.ObtenerLista(Me)
    End Get
  End Property

  Public Property ClienteContado() As Cliente
    Get
      If mClienteContado Is Nothing AndAlso Entida_ClienteContado > 0 Then
        mClienteContado = New Cliente(OperadorDatos, Entida_ClienteContado)
      End If
      Return mClienteContado
    End Get
    Set(ByVal value As Cliente)
      mClienteContado = value
      If value Is Nothing Then
        Entida_ClienteContado = 0
      Else
        Entida_ClienteContado = value.Entida_Codigo
      End If
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Sucurs_Codigo = CType(Fila("Sucurs_Codigo"), Integer)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)

    Dim obj As Object
    obj = Fila("Entida_ClienteContado")
    If TypeOf obj Is DBNull Then
      Entida_ClienteContado = 0
    Else
      Entida_ClienteContado = CType(obj, Integer)
    End If
    mEntidadlugar = Nothing
    mEmpresa = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.datatable = New System.Data.datatable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Event CambioDatos As EventHandler

  Public Overridable Function Guardar() As Boolean
    'If Not EsNuevo And Not EsModificado Then
    '  Return True
    'End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True

    OperadorDatos.ComenzarTransaccion()
    bReturn = Entidadlugar.Guardar
    If bReturn Then
      Entida_Codigo = mEntidadlugar.Entida_Codigo

      Dim sAccion As String = "M"
      If EsNuevo Then
        sAccion = "I"
      End If
      OperadorDatos.AgregarParametro("@accion", sAccion)
      OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
      OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
      OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
      If Entida_ClienteContado > 0 Then
        OperadorDatos.AgregarParametro("@Entida_ClienteContado", Entida_ClienteContado)
      End If

      OperadorDatos.Procedimiento = _Procedimiento
      bReturn = OperadorDatos.Ejecutar(Result)
      OperadorDatos.LimpiarParametros()
      If bReturn Then
        If EsNuevo Then
          Sucurs_Codigo = Result
        End If
        'If Not OperadorDatos.EstaenTransaccion Then
        '  EsNuevo = False
        '  EsModificado = False
        'End If
      End If
    End If
    If bReturn Then
      OperadorDatos.TerminarTransaccion()
      AceptarCambios()
    Else
      OperadorDatos.CancelarTransaccion()
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False

    mEntidadlugar.AceptarCambios()

    RaiseEvent CambioDatos(Me, Nothing)
  End Sub

  Private Sub mEmpresa_CambioDatos(ByVal sender As Object, ByVal e As System.EventArgs) Handles mEmpresa.CambioDatos
    RaiseEvent CambioDatos(Me, Nothing)
  End Sub

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "SucursalList"
Public Class SucursalList
  Inherits System.ComponentModel.BindingList(Of Sucursal)

  Public Shared Function ObtenerLista(ByVal _empresa As Empresa, Optional ByVal _filtro As String = "") As SucursalList
    Dim oResult As SucursalList = New SucursalList
    Dim bReturn As Boolean
    Dim ds As datatable = Nothing
    With _empresa.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _empresa.Empres_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Sucursal"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Sucursal(_empresa, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
