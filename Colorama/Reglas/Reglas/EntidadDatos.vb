'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General


#Region "EntidadDatos"
Public Class EntidadDatos

  Const _Procedimiento As String = "proc_EntidadDatos"

  Private mParametrodet As WWTSParametroDet = Nothing

  Private mEntidad As Entidad = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Entida_Codigo As Integer, ByVal _PardetTipoDatos As WWTSParametroDet)
    Me.New(_OperadorDatos, False)
    Entida_Codigo = _Entida_Codigo
    PardetTipoDatos = _PardetTipoDatos
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto EntidadDatos")
    End If
  End Sub

  'Parametrodet
  Public Overridable Property PardetTipoDatos() As WWTSParametroDet
    Get
      If Me.mParametrodet Is Nothing AndAlso Pardet_Tipodatos > 0 Then
        Me.mParametrodet = New WWTSParametroDet(OperadorDatos, Parame_Tipodatos, Pardet_Tipodatos)
      End If
      Return Me.mParametrodet
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mParametrodet = value
      Parame_Tipodatos = value.Parame_Codigo
      Pardet_Tipodatos = value.Pardet_Secuencia
    End Set
  End Property

  'Entidad
  Public Overridable Property Entidad() As Entidad
    Get
      If Me.mEntidad Is Nothing AndAlso Not Entida_Codigo = 0 Then
        Me.mEntidad = New Entidad(OperadorDatos, Entida_Codigo)
      End If
      Return Me.mEntidad
    End Get
    Set(ByVal value As Entidad)
      Me.mEntidad = value
      Entida_Codigo = Me.mEntidad.Entida_Codigo
    End Set
  End Property

  Public ReadOnly Property Descripcion() As String
    Get
      Return String.Format("({0}) {1}", PardetTipoDatos.Pardet_Descripcion, Entdat_Descripcion)
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Parame_Tipodatos = CType(Fila("Parame_Tipodatos"), Integer)
    Pardet_Tipodatos = CType(Fila("Pardet_Tipodatos"), Integer)
    Entdat_Descripcion = CType(Fila("Entdat_Descripcion"), String)
    mParametrodet = Nothing
    mEntidad = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.datatable = New System.Data.datatable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Tipodatos", Parame_Tipodatos)
    OperadorDatos.AgregarParametro("@Pardet_Tipodatos", Pardet_Tipodatos)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    If Not EsNuevo And Not EsModificado Then
      Return True
    End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Tipodatos", Parame_Tipodatos)
    OperadorDatos.AgregarParametro("@Pardet_Tipodatos", Pardet_Tipodatos)
    OperadorDatos.AgregarParametro("@Entdat_Descripcion", Entdat_Descripcion)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        EsNuevo = False
        EsModificado = False
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Tipodatos", Parame_Tipodatos)
    OperadorDatos.AgregarParametro("@Pardet_Tipodatos", Pardet_Tipodatos)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "EntidadDatosList"
Public Class EntidadDatosList
  Inherits System.ComponentModel.BindingList(Of EntidadDatos)

  Public Shared Function ObtenerLista(ByVal _op As OperadorDatos, ByVal _Entidad As Entidad) As EntidadDatosList
    Dim oResult As EntidadDatosList = New EntidadDatosList
    Dim bReturn As Boolean
    Dim ds As datatable = Nothing
    With _op
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Entida_Codigo", _Entidad.Entida_Codigo)
      .Procedimiento = "proc_EntidadDatos"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New EntidadDatos(_op, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
