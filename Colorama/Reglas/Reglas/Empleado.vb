'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports System.Windows.Forms
Imports Infoware.Reglas.General

#Region "Empleado"
Public Class Empleado

  Const _Procedimiento As String = "proc_Empleado"

  Private mPardetTipoEmpleado As WWTSParametroDet = Nothing

  Private mPardetClaseEmpleado As WWTSParametroDet = Nothing

  Private mPardetSeguroCorporativo As WWTSParametroDet = Nothing

  Private mPardetBanco As WWTSParametroDet = Nothing

  Private mEntidadnatural As EntidadNatural = Nothing

  Private mPardetParroquia As WWTSParametroDet = Nothing

  Private mPardetTipoSangre As WWTSParametroDet = Nothing

  Private mPardetNacionalidad As WWTSParametroDet = Nothing

  Private mPardetTipoCtaBancaria As WWTSParametroDet = Nothing

  Private mPardetFormaPagoRol As WWTSParametroDet = Nothing

  Private mDiasTrabajados As Integer = -1

  Private mAniosTrabajados As Decimal = -1

  Private mCargas As Integer = 0

  Private mPardetTipoDiscapacidad As WWTSParametroDet = Nothing

  Private mSeleccionado As Boolean = False

  Private mPardetSectorDomicilio As WWTSParametroDet = Nothing

  Private mPardetAdjuntoArchivos As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Entida_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Entida_Codigo = _Entida_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Empleado")
    End If
  End Sub

  Public Property Seleccionado() As Boolean
    Get
      Return mSeleccionado
    End Get
    Set(ByVal value As Boolean)
      mSeleccionado = value
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Nombre Completo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)> _
  Public ReadOnly Property NombreCompleto() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return mEntidadnatural.NombreCompleto
      End If
    End Get
  End Property

  'Entidadnatural
  Public Overridable Property Entidadnatural() As EntidadNatural
    Get
      If Me.mEntidadnatural Is Nothing Then
        Me.mEntidadnatural = New EntidadNatural(OperadorDatos, Entida_Codigo)
      End If
      Return Me.mEntidadnatural
    End Get
    Set(ByVal value As EntidadNatural)
      Me.mEntidadnatural = value
      Entida_Codigo = value.Entida_Codigo
    End Set
  End Property

  Public ReadOnly Property Cedula() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.Cedula
      End If
    End Get
  End Property

  Public ReadOnly Property CedulaMilitar() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.CedulaMilitar
      End If
    End Get
  End Property

  Public ReadOnly Property CarnetSeguro() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.CarnetSeguro
      End If
    End Get
  End Property

  Public ReadOnly Property SexoString() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.PardetSexoString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Teléfono", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property TelefonosString() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.TelefonosString
      End If
    End Get
  End Property

  Public ReadOnly Property DireccionesString() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.DireccionesString
      End If
    End Get
  End Property

  Public ReadOnly Property EstadoCivilString() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.PardetEstadoCivilString
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Property PardetTipoEmpleado() As WWTSParametroDet
    Get
      If mPardetTipoEmpleado Is Nothing AndAlso Pardet_Tipoempleado > 0 Then
        mPardetTipoEmpleado = New WWTSParametroDet(OperadorDatos, Parame_Tipoempleado, Pardet_Tipoempleado)
      End If
      Return Me.mPardetTipoEmpleado
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoEmpleado = value
      Parame_Tipoempleado = value.Parame_Codigo
      Pardet_Tipoempleado = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo empleado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property PardetTipoEmpleadoString() As String
    Get
      If PardetTipoEmpleado Is Nothing Then
        Return String.Empty
      Else
        Return PardetTipoEmpleado.Pardet_Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetClaseEmpleado() As WWTSParametroDet
    Get
      If mPardetClaseEmpleado Is Nothing AndAlso Pardet_ClaseEmpleado > 0 Then
        mPardetClaseEmpleado = New WWTSParametroDet(OperadorDatos, Parame_ClaseEmpleado, Pardet_ClaseEmpleado)
      End If
      Return Me.mPardetClaseEmpleado
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetClaseEmpleado = value
      Parame_ClaseEmpleado = value.Parame_Codigo
      Pardet_ClaseEmpleado = value.Pardet_Secuencia
    End Set
  End Property

  Public ReadOnly Property PardetClaseEmpleadoString() As String
    Get
      If PardetClaseEmpleado Is Nothing Then
        Return String.Empty
      Else
        Return PardetClaseEmpleado.Pardet_Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetSeguroCorporativo() As WWTSParametroDet
    Get
      If mPardetSeguroCorporativo Is Nothing AndAlso Pardet_SeguroCorporativo > 0 Then
        mPardetSeguroCorporativo = New WWTSParametroDet(OperadorDatos, Parame_SeguroCorporativo, Pardet_SeguroCorporativo)
      End If
      Return Me.mPardetSeguroCorporativo
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetSeguroCorporativo = value
      Parame_SeguroCorporativo = value.Parame_Codigo
      Pardet_SeguroCorporativo = value.Pardet_Secuencia
    End Set
  End Property

  Public ReadOnly Property PardetSeguroCorporativoString() As String
    Get
      If PardetSeguroCorporativo Is Nothing Then
        Return String.Empty
      Else
        Return PardetSeguroCorporativo.Pardet_Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetParroquia() As WWTSParametroDet
    Get
      If mPardetParroquia Is Nothing AndAlso Pardet_Parroquia > 0 Then
        mPardetParroquia = New WWTSParametroDet(OperadorDatos, Parame_Parroquia, Pardet_Parroquia)
      End If
      Return Me.mPardetParroquia
    End Get
    Set(ByVal value As WWTSParametroDet)
      If value Is Nothing Then
        Throw New Exception("No incluyó la información de la parroquia de nacimiento")
      End If
      Me.mPardetParroquia = value
      Parame_Parroquia = value.Parame_Codigo
      Pardet_Parroquia = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetBanco() As WWTSParametroDet
    Get
      If mPardetBanco Is Nothing AndAlso Pardet_Banco > 0 Then
        mPardetBanco = New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco)
      End If
      Return Me.mPardetBanco
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetBanco = value
      Parame_Banco = value.Parame_Codigo
      Pardet_Banco = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetTipoSangre() As WWTSParametroDet
    Get
      If mPardetTipoSangre Is Nothing AndAlso Pardet_TipoSangre > 0 Then
        mPardetTipoSangre = New WWTSParametroDet(OperadorDatos, Parame_TipoSangre, Pardet_TipoSangre)
      End If
      Return Me.mPardetTipoSangre
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoSangre = value
      Parame_TipoSangre = value.Parame_Codigo
      Pardet_TipoSangre = value.Pardet_Secuencia
    End Set
  End Property

  Public ReadOnly Property PardetTipoSangreString() As String
    Get
      If PardetTipoSangre Is Nothing Then
        Return String.Empty
      Else
        Return PardetTipoSangre.Pardet_Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetNacionalidad() As WWTSParametroDet
    Get
      If mPardetNacionalidad Is Nothing AndAlso Pardet_Nacionalidad > 0 Then
        mPardetNacionalidad = New WWTSParametroDet(OperadorDatos, Parame_Nacionalidad, Pardet_Nacionalidad)
      End If
      Return Me.mPardetNacionalidad
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetNacionalidad = value
      Parame_Nacionalidad = value.Parame_Codigo
      Pardet_Nacionalidad = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetTipoCtaBancaria() As WWTSParametroDet
    Get
      If mPardetTipoCtaBancaria Is Nothing AndAlso Pardet_TipoCuentaBancaria > 0 Then
        mPardetTipoCtaBancaria = New WWTSParametroDet(OperadorDatos, Parame_TipoCuentaBancaria, Pardet_TipoCuentaBancaria)
      End If
      Return Me.mPardetTipoCtaBancaria
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoCtaBancaria = value
      Parame_TipoCuentaBancaria = value.Parame_Codigo
      Pardet_TipoCuentaBancaria = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetFormaPagoRol() As WWTSParametroDet
    Get
      If mPardetFormaPagoRol Is Nothing AndAlso Pardet_FormaPagoRol > 0 Then
        mPardetFormaPagoRol = New WWTSParametroDet(OperadorDatos, Parame_FormaPagoRol, Pardet_FormaPagoRol)
      End If
      Return Me.mPardetFormaPagoRol
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetFormaPagoRol = value
      Parame_FormaPagoRol = value.Parame_Codigo
      Pardet_FormaPagoRol = value.Pardet_Secuencia
    End Set
  End Property

  Public Overridable Property Pardet_FormaPagoRolEnum() As Enumerados.enumFormaPagoRol
    Get
      Return CType(Pardet_FormaPagoRol, Enumerados.enumFormaPagoRol)
    End Get
    Set(ByVal value As Enumerados.enumFormaPagoRol)
      Pardet_FormaPagoRol = CInt(value)
    End Set
  End Property

  Public ReadOnly Property Edad() As Integer
    Get
      If Entidadnatural Is Nothing Then
        Return 0
      Else
        Return Entidadnatural.Edad
      End If
    End Get
  End Property

  'PardetSectorDomicilio
  Public Overridable Property PardetSectorDomicilio() As WWTSParametroDet
    Get
      If Me.mPardetSectorDomicilio Is Nothing AndAlso Pardet_SectorDomicilio > 0 Then
        Me.mPardetSectorDomicilio = New WWTSParametroDet(OperadorDatos, Me.Parame_SectorDomicilio, Me.Pardet_SectorDomicilio)
      End If
      Return Me.mPardetSectorDomicilio
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetSectorDomicilio = value
      If value Is Nothing Then
        Parame_SectorDomicilio = 0
        Pardet_SectorDomicilio = 0
      Else
        Parame_SectorDomicilio = value.Parame_Codigo
        Pardet_SectorDomicilio = value.Pardet_Secuencia
      End If
    End Set
  End Property

  Public ReadOnly Property SectorDomicilioString() As String
    Get
      If PardetSectorDomicilio Is Nothing Then
        Return String.Empty
      Else
        Return PardetSectorDomicilio.Descripcion
      End If
    End Get
  End Property

  'PardetAdjuntarArchivos
  Public Overridable Property PardetAdjuntoArchivos() As WWTSParametroDet
    Get
      If Me.mPardetAdjuntoArchivos Is Nothing AndAlso Pardet_AdjuntoArchivos > 0 Then
        Me.mPardetAdjuntoArchivos = New WWTSParametroDet(OperadorDatos, Me.Parame_AdjuntoArchivos, Me.Pardet_AdjuntoArchivos)
      End If
      Return Me.mPardetAdjuntoArchivos
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetAdjuntoArchivos = value
      If value Is Nothing Then
        Parame_AdjuntoArchivos = 0
        Pardet_AdjuntoArchivos = 0
      Else
        Parame_AdjuntoArchivos = value.Parame_Codigo
        Pardet_AdjuntoArchivos = value.Pardet_Secuencia
      End If
    End Set
  End Property

  Public ReadOnly Property CiudadDomicilioString() As String
    Get
      If Entidadnatural Is Nothing Then
        Return String.Empty
      Else
        Return Entidadnatural.Entidad.CiudadDomicilioString
      End If
    End Get
  End Property

  'Public ReadOnly Property EstadoActualString() As String
  '  Get
  '    If UltimoContrato Is Nothing Then
  '      Return String.Empty
  '    Else
  '      If UltimoContrato.Activo Then
  '        Return "Activo, Fecha: " + UltimoContrato.Contra_Desde + ", Seccion: " + UltimoContrato.PardetSeccion.Descripcion + ", Cargo: " + UltimoContrato.Cargo.Cargo_Descripcion
  '      Else
  '        Return UltimoContrato.PardetMotivoSalida.Descripcion + ", de: " + UltimoContrato.Contra_Desde + " a " + UltimoContrato.Contra_Hasta + ", Seccion: " + UltimoContrato.PardetSeccion.Descripcion + ", Cargo: " + UltimoContrato.Cargo.Cargo_Descripcion
  '      End If
  '    End If
  '  End Get
  'End Property

  '#Region "Cargas x empleados"
  '  Private WithEvents mCargasxEmpleados As CargasxEmpleadoList = Nothing
  '  Public Property CargasxEmpleados() As CargasxEmpleadoList
  '    Get
  '      If mCargasxEmpleados Is Nothing Then
  '        mCargasxEmpleados = CargasxEmpleadoList.ObtenerLista(OperadorDatos, Me)
  '      End If
  '      Return mCargasxEmpleados
  '    End Get
  '    Set(ByVal value As CargasxEmpleadoList)
  '      mCargasxEmpleados = value
  '    End Set
  '  End Property

  '  Private Sub mCargasxEmpleados_AddingNew(ByVal sender As Object, ByVal e As System.ComponentModel.AddingNewEventArgs) Handles mCargasxEmpleados.AddingNew
  '    Dim _cargas As New CargasxEmpleado(OperadorDatos, Me, True)
  '    e.NewObject = _cargas
  '  End Sub

  '  Public ReadOnly Property NumeroCargas() As Integer
  '    Get
  '      Return CargasxEmpleados.Count
  '    End Get
  '  End Property
  '#End Region

  Public ReadOnly Property Diastrabajados() As Integer
    Get
      If mDiasTrabajados = -1 Then
        Dim dsResult As New datatable
        Dim bResult As Boolean
        With OperadorDatos
          .AgregarParametro("@accion", "c")
          .AgregarParametro("@Entida_Codigo", Me.Entida_Codigo)
          .Procedimiento = "proc_vacacion"
          bResult = .Ejecutar(dsResult)
          .LimpiarParametros()
        End With
        If bResult And dsResult.Rows.Count > 0 Then
          Me.mDiasTrabajados = (dsResult.Rows(0)("diastrabajados"))
        End If
      End If
      Return mDiasTrabajados
    End Get
  End Property

  'Parametrodet
  Public Overridable Property PardetTipoDiscapacidad() As WWTSParametroDet
    Get
      If mPardetTipoDiscapacidad Is Nothing AndAlso Pardet_TipoDiscapacidad > 0 Then
        mPardetTipoDiscapacidad = New WWTSParametroDet(OperadorDatos, Parame_TipoDiscapacidad, Pardet_TipoDiscapacidad)
      End If
      Return Me.mPardetTipoDiscapacidad
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoDiscapacidad = value
      Parame_TipoDiscapacidad = value.Parame_Codigo
      Pardet_TipoDiscapacidad = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Discapacidad", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property PardetTipoDiscapacidadString() As String
    Get
      If PardetTipoDiscapacidad Is Nothing Then
        Return String.Empty
      Else
        Return PardetTipoDiscapacidad.Pardet_Descripcion
      End If
    End Get
  End Property

  Public ReadOnly Property Cargas() As Integer
    Get
      Return mCargas
    End Get
  End Property

  Public ReadOnly Property AniosTrabajados() As Decimal
    Get
      If mAniosTrabajados = -1 Then
        mAniosTrabajados = Diastrabajados / 365
      End If
      Return mAniosTrabajados
    End Get
  End Property

  'Public ReadOnly Property ContratoActivo() As Contrato
  '  Get
  '    Return BuscarContratoActivo()
  '  End Get
  'End Property

  'Public ReadOnly Property UltimoContrato() As Contrato
  '  Get
  '    Return BuscarUltimoContrato()
  '  End Get
  'End Property

  'Public Function BuscarContratoActivo() As Contrato
  '  Dim dsResult As New DataTable
  '  Dim bResult As Boolean
  '  Dim oResult As Contrato = Nothing

  '  With Me.OperadorDatos
  '    .AgregarParametro("@accion", "CA")
  '    .AgregarParametro("@Entida_Codigo", Entida_Codigo)
  '    .Procedimiento = _Procedimiento
  '    bResult = .Ejecutar(dsResult)
  '    .LimpiarParametros()
  '  End With

  '  If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
  '    Dim percodigo As String
  '    Dim patcodigo As String
  '    Dim consecuencial As Integer
  '    percodigo = CStr(dsResult.Rows(0)("Entida_Codigo"))
  '    patcodigo = CStr(dsResult.Rows(0)("Patron_codigo"))
  '    consecuencial = CInt(dsResult.Rows(0)("Contra_secuencia"))
  '    oResult = New Contrato(Me.OperadorDatos, percodigo, patcodigo, consecuencial)
  '  End If
  '  Return oResult
  'End Function

  'Public Function BuscarUltimoContrato() As Contrato
  '  Dim dsResult As New DataTable
  '  Dim bResult As Boolean
  '  Dim oResult As Contrato = Nothing

  '  With Me.OperadorDatos
  '    .AgregarParametro("@accion", "UC")
  '    .AgregarParametro("@Entida_Codigo", Entida_Codigo)
  '    .Procedimiento = "proc_Contrato"
  '    '.Procedimiento = _Procedimiento
  '    bResult = .Ejecutar(dsResult)
  '    .LimpiarParametros()
  '  End With

  '  If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
  '    Dim percodigo As String
  '    Dim patcodigo As String
  '    Dim consecuencial As Integer
  '    percodigo = CStr(dsResult.Rows(0)("Entida_Codigo"))
  '    patcodigo = CStr(dsResult.Rows(0)("Patron_codigo"))
  '    'consecuencial = CInt(dsResult.Rows(0)("Con_secuencial"))
  '    consecuencial = CInt(dsResult.Rows(0)("Contra_secuencia"))
  '    oResult = New Contrato(Me.OperadorDatos, percodigo, patcodigo, consecuencial)
  '  End If
  '  Return oResult
  'End Function

  Public Shared Function BuscarporCedula(ByVal _OperadorDatos As OperadorDatos, ByVal _per_cedula As String) As Empleado
    Dim oResult As Empleado = Nothing
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "cc")
      .AgregarParametro("@per_cedula", _per_cedula)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      oResult = New Empleado(_OperadorDatos, False)
      oResult.MapearDataRowaObjeto(dsResult.Rows(0))
    End If
    Return oResult
  End Function

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Parame_Tipoempleado = CType(Fila("Parame_Tipoempleado"), Integer)
    Pardet_Tipoempleado = CType(Fila("Pardet_Tipoempleado"), Integer)
    Emplea_Visible = CType(Fila("Emplea_Visible"), Boolean)
    Parame_ClaseEmpleado = CType(Fila("Parame_ClaseEmpleado"), Integer)
    Pardet_ClaseEmpleado = CType(Fila("Pardet_ClaseEmpleado"), Integer)
    Parame_SeguroCorporativo = CType(Fila("Parame_SeguroCorporativo"), Integer)
    Pardet_SeguroCorporativo = CType(Fila("Pardet_SeguroCorporativo"), Integer)
    Parame_Parroquia = CType(Fila("Parame_Parroquia"), Integer)
    Pardet_Parroquia = CType(Fila("Pardet_Parroquia"), Integer)
    If TypeOf Fila("Parame_Banco") Is DBNull OrElse TypeOf Fila("Pardet_Banco") Is DBNull Then
      Parame_Banco = 0
      Pardet_Banco = 0
    Else
      Parame_Banco = CType(Fila("Parame_Banco"), Integer)
      Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    End If
    If TypeOf Fila("Parame_TipoSangre") Is DBNull OrElse TypeOf Fila("Pardet_TipoSangre") Is DBNull Then
      Parame_TipoSangre = 0
      Pardet_TipoSangre = 0
    Else
      Parame_TipoSangre = CType(Fila("Parame_TipoSangre"), Integer)
      Pardet_TipoSangre = CType(Fila("Pardet_TipoSangre"), Integer)
    End If
    If TypeOf Fila("Parame_Nacionalidad") Is DBNull OrElse TypeOf Fila("Pardet_Nacionalidad") Is DBNull Then
      Parame_Nacionalidad = 0
      Pardet_Nacionalidad = 0
    Else
      Parame_Nacionalidad = CType(Fila("Parame_Nacionalidad"), Integer)
      Pardet_Nacionalidad = CType(Fila("Pardet_Nacionalidad"), Integer)
    End If
    If TypeOf Fila("Emplea_Emergencia") Is DBNull Then
      Emplea_Emergencia = ""
    Else
      Emplea_Emergencia = CType(Fila("Emplea_Emergencia"), String)
    End If
    If TypeOf Fila("Emplea_Enfermedad") Is DBNull Then
      Emplea_Enfermedad = ""
    Else
      Emplea_Enfermedad = CType(Fila("Emplea_Enfermedad"), String)
    End If
    Emplea_FichaRoja = CType(Fila("Emplea_FichaRoja"), Boolean)
    If TypeOf Fila("Parame_TipoCuentaBancaria") Is DBNull OrElse TypeOf Fila("Pardet_TipoCuentaBancaria") Is DBNull Then
      Parame_TipoCuentaBancaria = 0
      Pardet_TipoCuentaBancaria = 0
    Else
      Parame_TipoCuentaBancaria = CType(Fila("Parame_TipoCuentaBancaria"), Integer)
      Pardet_TipoCuentaBancaria = CType(Fila("Pardet_TipoCuentaBancaria"), Integer)
    End If
    If TypeOf Fila("Emplea_NumeroCuentaBancaria") Is DBNull Then
      Emplea_NumeroCuentaBancaria = ""
    Else
      Emplea_NumeroCuentaBancaria = CType(Fila("Emplea_NumeroCuentaBancaria"), String)
    End If
    Parame_FormaPagoRol = CType(Fila("Parame_FormaPagoRol"), Integer)
    Pardet_FormaPagoRol = CType(Fila("Pardet_FormaPagoRol"), Integer)
    Emplea_JubilacionPatronal = CType(Fila("Emplea_JubilacionPatronal"), Decimal)
    Emplea_DesctoPrestQuirogMensual = CType(Fila("Emplea_DesctoPrestQuirogMensual"), Decimal)
    Emplea_Primaria = CType(Fila("Emplea_Primaria"), String)
    Emplea_Primariaanio = CType(Fila("Emplea_Primariaanio"), String)
    Emplea_Secundaria = CType(Fila("Emplea_Secundaria"), String)
    Emplea_Secundariaanio = CType(Fila("Emplea_Secundariaanio"), String)
    Emplea_Bachiller = CType(Fila("Emplea_Bachiller"), String)
    Emplea_Superior = CType(Fila("Emplea_Superior"), String)
    Emplea_Superioranio = CType(Fila("Emplea_Superioranio"), String)
    Emplea_Titulo = CType(Fila("Emplea_Titulo"), String)
    Emplea_Cursos = CType(Fila("Emplea_Cursos"), String)
    Emplea_ReferPersonales = CType(Fila("Emplea_ReferPersonales"), String)
    Emplea_ReferLaborales = CType(Fila("Emplea_ReferLaborales"), String)
    Emplea_ExcluirFamiliares = CType(Fila("Emplea_ExcluirFamiliares"), Boolean)
    Emplea_FechaAfiliacionIESS = CType(Fila("Emplea_FechaAfiliacionIESS"), DateTime)
    Parame_TipoDiscapacidad = CType(Fila("Parame_TipoDiscapacidad"), Integer)
    Pardet_TipoDiscapacidad = CType(Fila("Pardet_TipoDiscapacidad"), Integer)
    Emplea_DiscaFisica = CBool(Fila("Emplea_DiscaFisica"))
    Emplea_DiscaAuditiva = CBool(Fila("Emplea_DiscaAuditiva"))
    Emplea_DiscaLenguaje = CBool(Fila("Emplea_DiscaLenguaje"))
    Emplea_DiscaVisual = CBool(Fila("Emplea_DiscaVisual"))
    Emplea_DiscaIntelectual = CBool(Fila("Emplea_DiscaIntelectual"))
    Emplea_DiscaPsicologica = CBool(Fila("Emplea_DiscaPsicologica"))
    Parame_SectorDomicilio = CType(Fila("Parame_SectorDomicilio"), Integer)
    Pardet_SectorDomicilio = CType(Fila("Pardet_SectorDomicilio"), Integer)
    Try
      Parame_AdjuntoArchivos = CType(Fila("Parame_AdjuntoArchivos"), Integer)
      Pardet_AdjuntoArchivos = CType(Fila("Pardet_AdjuntoArchivos"), Integer)
    Catch ex As Exception
      Parame_AdjuntoArchivos = 0
      Pardet_AdjuntoArchivos = 0
    End Try
    
    mPardetTipoEmpleado = Nothing
    mPardetClaseEmpleado = Nothing
    mPardetSeguroCorporativo = Nothing
    mPardetParroquia = Nothing
    mEntidadnatural = Nothing
    mPardetBanco = Nothing
    mPardetTipoSangre = Nothing
    mPardetTipoDiscapacidad = Nothing
    mPardetNacionalidad = Nothing
    mPardetTipoCtaBancaria = Nothing
    mPardetFormaPagoRol = Nothing
    mPardetSectorDomicilio = Nothing
    mPardetAdjuntoArchivos = Nothing
    'cargas
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    'If Not EsNuevo And Not EsModificado Then
    '  Return True
    'End If
    Dim Result As Short = 0
    Dim bReturn As Boolean = True

    Dim _haycedula As Boolean = False
    For Each _ident As EntidadIdentificacion In Entidadnatural.Entidad.Identificaciones
      Select Case _ident.Pardet_TipoidentificacionEnum
        Case Enumerados.enumTipoIdentificacion.Cedula
          If String.IsNullOrEmpty(_ident.Identi_Numero) Then
            Throw New Exception("La cédula ingresada no es válida")
          End If
          _haycedula = True
      End Select
    Next
    If Not _haycedula Then
      Throw New Exception("No ha ingresado la cédula de identidad")
    End If

    OperadorDatos.ComenzarTransaccion()
    bReturn = Entidadnatural.Guardar
    If bReturn Then
      Entida_Codigo = mEntidadnatural.Entida_Codigo

      Dim sAccion As String = "M"
      If EsNuevo Then
        sAccion = "I"
      End If

      If PardetAdjuntoArchivos IsNot Nothing AndAlso PardetAdjuntoArchivos.PardetHijos IsNot Nothing Then
        If (PardetAdjuntoArchivos.EsNuevo AndAlso PardetAdjuntoArchivos.PardetHijos.Count > 0) Or (Not PardetAdjuntoArchivos.EsNuevo AndAlso PardetAdjuntoArchivos.PardetHijos.Count + PardetAdjuntoArchivos.PardetHijosEli.Count > 0) Then
          bReturn = PardetAdjuntoArchivos.Guardar
          If bReturn Then
            Parame_AdjuntoArchivos = PardetAdjuntoArchivos.Parame_Codigo
            Pardet_AdjuntoArchivos = PardetAdjuntoArchivos.Pardet_Secuencia
          End If
        End If
      End If

      OperadorDatos.AgregarParametro("@accion", sAccion)
      OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
      OperadorDatos.AgregarParametro("@Parame_Tipoempleado", Parame_Tipoempleado)
      OperadorDatos.AgregarParametro("@Pardet_Tipoempleado", Pardet_Tipoempleado)
      OperadorDatos.AgregarParametro("@Emplea_Visible", Emplea_Visible)
      OperadorDatos.AgregarParametro("@Parame_ClaseEmpleado", Parame_ClaseEmpleado)
      OperadorDatos.AgregarParametro("@Pardet_ClaseEmpleado", Pardet_ClaseEmpleado)
      OperadorDatos.AgregarParametro("@Parame_SeguroCorporativo", Parame_SeguroCorporativo)
      OperadorDatos.AgregarParametro("@Pardet_SeguroCorporativo", Pardet_SeguroCorporativo)
      OperadorDatos.AgregarParametro("@Parame_Parroquia", Parame_Parroquia)
      OperadorDatos.AgregarParametro("@Pardet_Parroquia", Pardet_Parroquia)
      OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
      OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
      OperadorDatos.AgregarParametro("@Parame_TipoSangre", Parame_TipoSangre)
      OperadorDatos.AgregarParametro("@Pardet_TipoSangre", Pardet_TipoSangre)
      OperadorDatos.AgregarParametro("@Parame_Nacionalidad", Parame_Nacionalidad)
      OperadorDatos.AgregarParametro("@Pardet_Nacionalidad", Pardet_Nacionalidad)
      OperadorDatos.AgregarParametro("@Emplea_Emergencia", Emplea_Emergencia)
      OperadorDatos.AgregarParametro("@Emplea_Enfermedad", Emplea_Enfermedad)
      OperadorDatos.AgregarParametro("@Emplea_FichaRoja", Emplea_FichaRoja)
      OperadorDatos.AgregarParametro("@Parame_TipoCuentaBancaria", Parame_TipoCuentaBancaria)
      OperadorDatos.AgregarParametro("@Pardet_TipoCuentaBancaria", Pardet_TipoCuentaBancaria)
      OperadorDatos.AgregarParametro("@Emplea_NumeroCuentaBancaria", Emplea_NumeroCuentaBancaria)
      OperadorDatos.AgregarParametro("@Parame_FormaPagoRol", Parame_FormaPagoRol)
      OperadorDatos.AgregarParametro("@Pardet_FormaPagoRol", Pardet_FormaPagoRol)
      OperadorDatos.AgregarParametro("@Emplea_JubilacionPatronal", Emplea_JubilacionPatronal)
      OperadorDatos.AgregarParametro("@Emplea_DesctoPrestQuirogMensual", Emplea_DesctoPrestQuirogMensual)
      OperadorDatos.AgregarParametro("@Emplea_Primaria", Emplea_Primaria)
      OperadorDatos.AgregarParametro("@Emplea_Primariaanio", Emplea_Primariaanio)
      OperadorDatos.AgregarParametro("@Emplea_Secundaria", Emplea_Secundaria)
      OperadorDatos.AgregarParametro("@Emplea_Secundariaanio", Emplea_Secundariaanio)
      OperadorDatos.AgregarParametro("@Emplea_Bachiller", Emplea_Bachiller)
      OperadorDatos.AgregarParametro("@Emplea_Superior", Emplea_Superior)
      OperadorDatos.AgregarParametro("@Emplea_Superioranio", Emplea_Superioranio)
      OperadorDatos.AgregarParametro("@Emplea_Titulo", Emplea_Titulo)
      OperadorDatos.AgregarParametro("@Emplea_Cursos", Emplea_Cursos)
      OperadorDatos.AgregarParametro("@Emplea_ReferPersonales", Emplea_ReferPersonales)
      OperadorDatos.AgregarParametro("@Emplea_ReferLaborales", Emplea_ReferLaborales)
      OperadorDatos.AgregarParametro("@Emplea_ExcluirFamiliares", Emplea_ExcluirFamiliares)
      OperadorDatos.AgregarParametro("@Emplea_FechaAfiliacionIESS", Emplea_FechaAfiliacionIESS)
      OperadorDatos.AgregarParametro("@Parame_TipoDiscapacidad", Parame_TipoDiscapacidad)
      OperadorDatos.AgregarParametro("@Pardet_TipoDiscapacidad", Pardet_TipoDiscapacidad)
      OperadorDatos.AgregarParametro("@Emplea_DiscaFisica", Emplea_DiscaFisica)
      OperadorDatos.AgregarParametro("@Emplea_DiscaAuditiva", Emplea_DiscaAuditiva)
      OperadorDatos.AgregarParametro("@Emplea_DiscaLenguaje", Emplea_DiscaLenguaje)
      OperadorDatos.AgregarParametro("@Emplea_DiscaVisual", Emplea_DiscaVisual)
      OperadorDatos.AgregarParametro("@Emplea_DiscaIntelectual", Emplea_DiscaIntelectual)
      OperadorDatos.AgregarParametro("@Emplea_DiscaPsicologica", Emplea_DiscaPsicologica)
      OperadorDatos.AgregarParametro("@Parame_SectorDomicilio", Parame_SectorDomicilio)
      OperadorDatos.AgregarParametro("@Pardet_SectorDomicilio", Pardet_SectorDomicilio)
      If Pardet_AdjuntoArchivos > 0 Then
        OperadorDatos.AgregarParametro("@Parame_AdjuntoArchivos", Parame_AdjuntoArchivos)
        OperadorDatos.AgregarParametro("@Pardet_AdjuntoArchivos", Pardet_AdjuntoArchivos)
      End If
      OperadorDatos.Procedimiento = _Procedimiento
      bReturn = OperadorDatos.Ejecutar(Result)
      OperadorDatos.LimpiarParametros()
      'If bReturn Then
      '  'If Not OperadorDatos.EstaenTransaccion Then
      '  '  EsNuevo = False
      '  '  EsModificado = False
      '  'End If
      'End If
    End If
    If bReturn Then
      OperadorDatos.TerminarTransaccion()
      AceptarCambios()
    Else
      OperadorDatos.CancelarTransaccion()
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False

    mEntidadnatural.AceptarCambios()
  End Sub

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "EmpleadoList"
Public Class EmpleadoList
  Inherits System.ComponentModel.BindingList(Of Empleado)

  Public Function ListaSeleccionadas() As EmpleadoList
    Dim _empleados As New EmpleadoList
    For Each _empleado As Empleado In Me
      If _empleado.Seleccionado Then
        _empleados.Add(_empleado)
      End If
    Next
    Return _empleados
  End Function

  'Public Function ListaContratoActivoSeleccionados() As ContratoList
  '  Dim _contratos As New ContratoList
  '  For Each _empleado As Empleado In Me
  '    If _empleado.Seleccionado Then
  '      _contratos.Add(_empleado.ContratoActivo)
  '    End If
  '  Next
  '  Return _contratos
  'End Function

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _Nombre As String = "", Optional ByVal _Codigo As Integer = 0, Optional ByVal _Cedula As String = "", Optional ByVal _Edad As Integer = 0, Optional ByVal _Mayorque As Boolean = True, Optional ByVal _FichaRoja As System.Windows.Forms.CheckState = CheckState.Indeterminate) As EmpleadoList
    Dim oResult As EmpleadoList = New EmpleadoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      If _Codigo > 0 Then
        .AgregarParametro("@Entida_Codigo", _Codigo)
      End If
      If Not String.IsNullOrEmpty(_Cedula) Then
        .AgregarParametro("@Cedula", _Cedula)
      End If
      'todo
      .AgregarParametro("@filtro", _Nombre)
      .Procedimiento = "proc_Empleado"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Empleado(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _TipoEmpleado As WWTSParametroDet) As EmpleadoList
    Dim oResult As EmpleadoList = New EmpleadoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Pardet_Tipoempleado", _TipoEmpleado.Pardet_Secuencia)
      .Procedimiento = "proc_Empleado"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Empleado(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarEmpleadosInactivos(ByVal _OperadorDatos As OperadorDatos, ByVal _anioinactivo As Integer) As EmpleadoList
    Dim oResult As New EmpleadoList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "ia")
      .AgregarParametro("@anioinactivo", _anioinactivo)
      .Procedimiento = "proc_Empleado"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Empleado(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  'Public Shared Function RetornarPersonasSinContrato(ByVal _OperadorDatos As OperadorDatos, ByVal _periodo As PeriodoPago, ByVal _cls_codigo As String, ByVal _poredad As Boolean, ByVal _edadi As Integer, ByVal _edadf As Integer) As EmpleadoList
  '  Dim oResult As New EmpleadoList
  '  Dim bReturn As Boolean
  '  Dim dsResult As New DataTable
  '  With _OperadorDatos
  '    .AgregarParametro("@accion", "CNA")
  '    .AgregarParametro("@fecactivod", _periodo.PerPag_FechaDesde)
  '    .AgregarParametro("@fecactivoh", _periodo.PerPag_FechaHasta)
  '    .AgregarParametro("@cls_codigo", _cls_codigo)
  '    .AgregarParametro("@poredad", _poredad)
  '    .AgregarParametro("@edadi", _edadi)
  '    .AgregarParametro("@edadf", _edadf)
  '    .Procedimiento = "proc_Empleado"
  '    bReturn = .Ejecutar(dsResult)
  '    .LimpiarParametros()
  '  End With
  '  If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
  '    For Each _dr As DataRow In dsResult.Rows
  '      Dim _obj As New Empleado(_OperadorDatos, False)
  '      _obj.MapearDataRowaObjeto(_dr)
  '      oResult.Add(_obj)
  '    Next
  '  End If
  '  Return oResult
  'End Function

  Public Shared Function RetornarPersonasJubilados(ByVal _OperadorDatos As OperadorDatos) As EmpleadoList
    Dim oResult As New EmpleadoList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "J")
      .Procedimiento = "proc_Empleado"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Empleado(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerPersonasReclutamiento(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _PardetArea As WWTSParametroDet = Nothing, Optional ByVal _PardetSectorDomicilio As WWTSParametroDet = Nothing, Optional ByVal _filtro As String = "") As EmpleadoList
    Dim oResult As New EmpleadoList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "FS")
      If _PardetArea IsNot Nothing Then
        .AgregarParametro("@Parame_Area", _PardetArea.Parame_Codigo)
        .AgregarParametro("@Pardet_Area", _PardetArea.Pardet_Secuencia)
      End If
      If _PardetSectorDomicilio IsNot Nothing Then
        .AgregarParametro("Parame_SectorDomicilio", _PardetSectorDomicilio.Parame_Codigo)
        .AgregarParametro("Pardet_SectorDomicilio", _PardetSectorDomicilio.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Empleado"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Empleado(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
