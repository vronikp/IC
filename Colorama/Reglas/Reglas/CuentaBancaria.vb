'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General

#Region "CuentaBancaria"
Public Class CuentaBancaria

  Const _Procedimiento As String = "proc_CuentaBancaria"

  Private mPardetBanco As WWTSParametroDet = Nothing

  Private mPardetTipoCtaBancaria As WWTSParametroDet = Nothing

  Private mEmpresa As Empresa = Nothing

  'Private mCuentaContable As CuentaContable = Nothing

  Public Sub New(ByVal _Empresa As Empresa, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _Empresa.OperadorDatos
    Empresa = _Empresa
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Empresa As Empresa, ByVal _PardetBanco As WWTSParametroDet, ByVal _CtaBan_Numero As String)
    Me.New(_Empresa, False)
    PardetBanco = _PardetBanco
    CtaBan_Numero = _CtaBan_Numero
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto CuentaBancaria")
    End If
  End Sub

  'Parametrodet
  Public Overridable Property PardetBanco() As WWTSParametroDet
    Get
      If Me.mPardetBanco Is Nothing AndAlso Pardet_Banco > 0 Then
        Me.mPardetBanco = New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco)
      End If
      Return Me.mPardetBanco
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetBanco = value
      Parame_Banco = value.Parame_Codigo
      Pardet_Banco = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Property PardetTipoCtaBancaria() As WWTSParametroDet
    Get
      If Me.mPardetTipoCtaBancaria Is Nothing AndAlso Pardet_TipoCuentaBancaria > 0 Then
        Me.mPardetTipoCtaBancaria = New WWTSParametroDet(OperadorDatos, Parame_TipoCuentaBancaria, Pardet_TipoCuentaBancaria)
      End If
      Return Me.mPardetTipoCtaBancaria
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoCtaBancaria = value
      Parame_TipoCuentaBancaria = value.Parame_Codigo
      Pardet_TipoCuentaBancaria = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo de cuenta", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 110, True)> _
  Public ReadOnly Property PardetTipoCtaBancariaString() As String
    Get
      If PardetTipoCtaBancaria Is Nothing Then
        Return String.Empty
      Else
        Return mPardetTipoCtaBancaria.Pardet_Descripcion
      End If
    End Get
  End Property

  Private mSaldoContable As Decimal = 0
  Public ReadOnly Property SaldoContable() As Decimal
    Get
      Return mSaldoContable
    End Get
  End Property

  Private mSaldoBancario As Decimal = 0
  Public ReadOnly Property SaldoBancario() As Decimal
    Get
      Return mSaldoBancario
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Banco", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 130, True)> _
  Public ReadOnly Property BancoString() As String
    Get
      If PardetBanco Is Nothing Then
        Return String.Empty
      Else
        Return mPardetBanco.Pardet_Descripcion
      End If
    End Get
  End Property

  'Empresa
  Public Overridable Property Empresa() As Empresa
    Get
      If Me.mEmpresa Is Nothing AndAlso Not Empres_Codigo = 0 Then
        Me.mEmpresa = New Empresa(OperadorDatos, Empres_Codigo)
      End If
      Return Me.mEmpresa
    End Get
    Set(ByVal value As Empresa)
      Me.mEmpresa = value
      Empres_Codigo = Me.mEmpresa.Empres_Codigo
    End Set
  End Property

  ''CuentaContable
  'Public Overridable Property CuentaContable() As CuentaContable
  '  Get
  '    If Me.mCuentaContable Is Nothing AndAlso Not CtaCtb_Codigo = "" Then
  '      Me.mCuentaContable = New CuentaContable(OperadorDatos, CtaCtb_Codigo)
  '    End If
  '    Return Me.mCuentaContable
  '  End Get
  '  Set(ByVal value As CuentaContable)
  '    Me.mCuentaContable = value
  '    CtaCtb_Codigo = Me.mCuentaContable.CtaCtb_Codigo
  '  End Set
  'End Property

  '<Infoware.Reportes.CampoReporteAtributo("Cuenta Contable", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)> _
  'Public ReadOnly Property CuentaContableString() As String
  '  Get
  '    If CuentaContable Is Nothing Then
  '      Return String.Empty
  '    Else
  '      Return mCuentaContable.DescripcionLarga
  '    End If
  '  End Get
  'End Property

  Public Overridable ReadOnly Property SiguienteCheque() As Integer
    Get
      If Recargar() Then
        Return CtaBan_UltimoCheque + 1
      Else
        Return 1
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Parame_Banco = CType(Fila("Parame_Banco"), Integer)
    Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    Parame_TipoCuentaBancaria = CType(Fila("Parame_TipoCuentaBancaria"), Integer)
    Pardet_TipoCuentaBancaria = CType(Fila("Pardet_TipoCuentaBancaria"), Integer)
    CtaBan_Numero = CType(Fila("CtaBan_Numero"), String)
    CtaBan_UltimoCheque = CType(Fila("CtaBan_UltimoCheque"), Integer)
    mPardetBanco = Nothing
    'CtaCtb_Codigo = CType(Fila("CtaCtb_Codigo"), String)
    'mCuentaContable = Nothing
    mSaldoContable = 0
    mSaldoBancario = 0
    On Error Resume Next
    mSaldoContable = CType(Fila("SaldoContable"), Decimal)
    mSaldoBancario = CType(Fila("SaldoBancario"), Decimal)
    On Error GoTo 0
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.datatable = New System.Data.datatable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    If Not EsNuevo And Not EsModificado Then
      Return True
    End If
    Dim Result As Short = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Parame_TipoCuentaBancaria", Parame_TipoCuentaBancaria)
    OperadorDatos.AgregarParametro("@Pardet_TipoCuentaBancaria", Pardet_TipoCuentaBancaria)
    OperadorDatos.AgregarParametro("@CtaBan_UltimoCheque", CtaBan_UltimoCheque)
    OperadorDatos.AgregarParametro("@CtaCtb_Codigo", CtaCtb_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "CuentaBancariaList"
Public Class CuentaBancariaList
  Inherits System.ComponentModel.BindingList(Of CuentaBancaria)

  Public Shared Function ObtenerLista(ByVal _Empresa As Empresa, Optional ByVal _Banco As WWTSParametroDet = Nothing, Optional ByVal _filtro As String = "") As CuentaBancariaList
    Dim oResult As CuentaBancariaList = New CuentaBancariaList
    Dim bReturn As Boolean
    Dim ds As datatable = Nothing
    With _Empresa.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _Empresa.Empres_Codigo)
      If _Banco IsNot Nothing Then
        .AgregarParametro("@Parame_Banco", _Banco.Parame_Codigo)
        .AgregarParametro("@Pardet_Banco", _Banco.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_CuentaBancaria"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New CuentaBancaria(_Empresa, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  'Public Shared Function ObtenerLista(ByVal _Empresa As Empresa, ByVal _CuentaContable As CuentaContable) As CuentaBancariaList
  '  Dim oResult As CuentaBancariaList = New CuentaBancariaList
  '  Dim bReturn As Boolean
  '  Dim ds As DataTable = Nothing
  '  With _Empresa.OperadorDatos
  '    .AgregarParametro("@Accion", "FC")
  '    .AgregarParametro("@Empres_Codigo", _Empresa.Empres_Codigo)
  '    .AgregarParametro("@CtaCtb_Codigo", _CuentaContable.CtaCtb_Codigo)
  '    .Procedimiento = "proc_CuentaBancaria"
  '    bReturn = .Ejecutar(ds)
  '    .LimpiarParametros()
  '  End With
  '  If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
  '    For Each _dr As DataRow In ds.Rows
  '      Dim _fila As New CuentaBancaria(_Empresa, False)
  '      _fila.MapearDataRowaObjeto(_dr)
  '      oResult.Add(_fila)
  '    Next
  '  End If
  '  Return oResult
  'End Function
End Class
#End Region
